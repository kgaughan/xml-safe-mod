#:schema https://json.schemastore.org/pyproject.json

[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "xmlsafemod"
dynamic = ["version"]
description = 'A utility for safely making updates to XML configuration files'
license = { file = "LICENSE" }
authors = [{ name = "Keith Gaughan", email = "k@stereochro.me" }]
requires-python = ">=3.7"
readme = "README.md"
keywords = []
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]

[project.urls]
Documentation = "https://github.com/kgaughan/xml-safe-mod"
Issues = "https://github.com/kgaughan/xml-safe-mod/issues"
Source = "https://github.com/kgaughan/xml-safe-mod"

[project.scripts]
xml-safe-mod = "xmlsafemod:main"

[tool.rye]
dev-dependencies = [
  "mypy>=1.4.1",
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-cov>=2.12.1",
]
universal = true
generate-hashes = true
managed = true

[tool.flit.module]
name = "xmlsafemod"

[tool.black]
line-length = 120

[tool.ruff]
target-version = "py37"
line-length = 120
src = ["src", "test"]

[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC002",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  "T201", # Allow print
]

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = ["xmlsafemod"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252", "E501"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=xmlsafemod --junitxml=tests/results.xml --cov-report html"
junit_logging = "out-err"
junit_family = "xunit2"

[tool.coverage.run]
source_pkgs = ["xmlsafemod", "tests"]
branch = true
parallel = true

[tool.coverage.paths]
xmlsafemod = ["xmlsafemod"]
tests = ["tests"]

[tool.coverage.report]
ignore_errors = true
# Regexes for lines to exclude from consideration
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "pass",
]

[tool.mypy]
ignore_missing_imports = true
