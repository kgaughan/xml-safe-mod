#:schema https://json.schemastore.org/pyproject.json

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "xmlsafemod"
dynamic = ["version"]
description = 'A utility for safely making updates to XML configuration files'
readme = "README.md"
requires-python = ">=3.7"
license = "MIT"
keywords = []
authors = [
  { name = "Keith Gaughan", email = "k@stereochro.me" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]

[project.urls]
Documentation = "https://github.com/kgaughan/xml-safe-mod"
Issues = "https://github.com/kgaughan/xml-safe-mod/issues"
Source = "https://github.com/kgaughan/xml-safe-mod"

[project.scripts]
xml-safe-mod = "xmlsafemod:main"

[tool.hatch.version]
path = "xmlsafemod.py"

[tool.hatch.build]
exclude = [
  ".gitignore",
]

[tool.rye]
dev-dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-cov>=2.12.1",
  "mypy>=1.4.1",
]
universal = true
generate-hashes = true
managed = true

[tool.ruff]
target-version = "py37"
line-length = 120

[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC002",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Allow print
  "T201",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["xmlsafemod"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["xmlsafemod", "tests"]
branch = true
parallel = true
omit = [
]

[tool.coverage.paths]
xmlsafemod = ["xmlsafemod"]
tests = ["tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
